<div id="list-nav">
    <!-- 
        Not all tech reports are included,
        more can be added by copying the template of each report
     -->
    <br>
    <h3>Technical Reports@CS</h3>
    <br>
    <ul class="list-group">
        <!-- First report -->
        <li class="list-group-item">
            Martin P. Robillard and Kaylee Kutschera, "Lessons Learned in Migrating from Swing to JavaFX", School of Computer Science, McGill University, Nov. 5, 2018, CS-TR-2018.2
            <a class="btn-small" data-toggle="collapse" href="#report1" role="button" aria-expanded="false" aria-controls="collapseExample">
                Abstract
            </a>
            <div class="collapse" id="report1">
                <br>
                <div class="card card-body">
                    <div class="card-title"><b>Abstract</b></div>
                    <p>
                        The authors describe their experience with the migration of a diagramming tool written in Java from the Swing Graphical User Interface framework to the more recent JavaFX framework, in the general context of research of software evolution. The experience
                        led to a number of unexpected realizations about the impact of subtle differences in the design of framework features and their documentation.
                    </p>
                    <br>
                    <a href="https://www.cs.mcgill.ca/~martin/papers/CS-TR-2018.2.pdf" class="btn" download>Link to Technical Reports</a>
                </div>
            </div>
        </li>
        <!-- Second report -->
        <li class="list-group-item">
            Mona Elsaadawy and Bettina Kemme, "SDN based performance monitoring for cloud-scale applications", Computer Science, McGill University, March 12, 2018, CS-TR-2018.1
            <a class="btn-small" data-toggle="collapse" href="#report2" role="button" aria-expanded="false" aria-controls="collapseExample">
                Abstract
            </a>
            <div class="collapse" id="report2">
                <br>
                <div class="card card-body">
                    <div class="card-title"><b>Abstract</b></div>
                    <p>
                        The recent rise of cloud applications, representing large complex modern distributed services running across hundreds to thousands of nodes, has made performance monitoring one of the major issues and a critical process for both cloud providers and cloud
                        customers. Many different monitoring techniques are used for such applications. In many cases, software instrumentation is required for taking measurements, making it a tedious task to implement. However, using
                        new trends like Software Defined Networking (SDN) and Network Function Virtualization (NFV) show promise to provide some of the required measurements without the need of customization. In this report, we review
                        some of the most common monitoring approaches. A major focus is on SDN and/or NFV based performance monitoring techniques that were developed to provide the scalability and agility needed in cloud-scale applications.
                    </p>
                    <br>
                    <a href="https://www.cs.mcgill.ca/media/tech_reports/None_SDN_based_performance_monitoring_for_cloud-scale_applications.pdf" class="btn" download>Link to Technical Reports</a>
                </div>
            </div>
        </li>
        <!-- Thrid report -->
        <li class="list-group-item">
            Bentley James Oakes, Levi Lúcio, Cláudio Gomes, and Hans Vangheluwe, "Expressive Symbolic-Execution Contract Proving for the DSLTrans Transformation Language", Computer Science, McGill University, Jan. 31, 2017, CS-TR-2017.1
            <a class="btn-small" data-toggle="collapse" href="#report3" role="button" aria-expanded="false" aria-controls="collapseExample">
                Abstract
            </a>
            <div class="collapse" id="report3">
                <br>
                <div class="card card-body">
                    <div class="card-title"><b>Abstract</b></div>
                    <p>
                        The verification of model transformations is key for the adoption of model-driven engineering in academic and industrial processes. In this work, we provide a verification technique for our model transformation language DSLTrans, which is both confluent
                        and terminating by construction.
                    </p>
                    <p>
                        This technique proves structural pre-condition/ post-condition structural contracts for all inputs to a transformation. This is achieved by creating path conditions for the transformation through a symbolic execution of the transformation’s rules. These
                        path conditions then represent all possible transformation executions through an abstraction relation.
                    </p>
                    <p>
                        In this work, we provide a detailed description of both the path condition construction and contract proving techniques. As well, we provide arguments that our techniques are valid, such that proving a contract on the finite set of path conditions for
                        a transformation implies that the contract holds on the infinite set of abstracted transformation executions.
                    </p>
                    <br>
                    <a href="https://www.cs.mcgill.ca/media/tech_reports/None_SDN_based_performance_monitoring_for_cloud-scale_applications.pdf" class="btn" download>Link to Technical Reports</a>
                </div>
            </div>
        </li>
        <!-- Fourth report -->
        <li class="list-group-item">
            Yentl Van Tendeloo and Hans Vangheluwe, "Explicit Type Instance Relations", School of Computer Science, McGill University, June 20, 2016, CS-TR-2016.12016.1
            <a class="btn-small" data-toggle="collapse" href="#report4" role="button" aria-expanded="false" aria-controls="collapseExample">
                Abstract
            </a>
            <div class="collapse" id="report4">
                <br>
                <div class="card card-body">
                    <div class="card-title"><b>Abstract</b></div>
                    <p>
                        The basic building block for constructing a modelling tool architecture, is the relationship between a type and its instances. It is this relation which gives rise to the hierarchy that forms the foundation of the four-layer-architecture and to multi-level
                        modelling. Only through the type/instance relation, a distinction is made between a model and its type model. This relation consists of two equally important components: instantiation and conformance. As both form
                        the foundation of a (meta-)modelling tool, they are often hardcoded, both for conceptual and performance reasons. While this seems logical, it constrains users to the problems envisioned by the tool developers.
                        It becomes necessary to alter models that are not a perfect fit for the provided framework, increasing accidental complexity. Incidentallly, minimizing accidental complexity is one of the core goals of Model Driven
                        Engineering. In this report, we consider the limitations imposed by a hardcoded conformance relation. We also present our approach of explicitly modelling the conformance relation: users can chose which conformance
                        to use, and gain insight in the semantics of the tool. We discuss the advantages of this approach, and how this was implemented in our tool: the Modelverse. An example is given where different notions of conformance
                        are used for both structural and nominal subtyping.
                    </p>
                    <br>
                    <a href="https://www.cs.mcgill.ca/media/tech_reports/39_Explicit_Type_Instance_Relations.pdf" class="btn" download>Link to Technical Reports</a>
                </div>
            </div>
        </li>
        <!-- Fifth report -->
        <li class="list-group-item">
            Ken Vanherpen, Joachim Denil, Paul De Meulenaere, and Hans Vangheluwe, "Design-Space Exploration in Model Driven Engineering –An Initial Pattern Catalogue–", School of Computer Science, McGill University, Aug. 15, 2014, CS-TR-2014.4
            <a class="btn-small" data-toggle="collapse" href="#report6" role="button" aria-expanded="false" aria-controls="collapseExample">
                Abstract
            </a>
            <div class="collapse" id="report6">
                <br>
                <div class="card card-body">
                    <div class="card-title"><b>Abstract</b></div>
                    <p>
                        A designer often has to evaluate alternative designs during the development of a system. A multitude of Design-Space Exploration (DSE) techniques exist in the literature. Integration of these techniques into the modelling paradigm is needed when a model-driven
                        engineering approach is used for designing systems. To a greater or lesser extent, the integration of those different DSE techniques share characteristics with each other. Inspired by software design patterns, we
                        introduce an initial pattern catalogue to categorise the embedding of different DSE techniques in an MDE context. We demonstrate their use by a literature survey and discuss the consequences of each pattern. Finally,
                        we demonstrate the application of our initial pattern catalogue on two examples.
                    </p>
                    <br>
                    <a href="https://www.cs.mcgill.ca/media/tech_reports/4_Design-Space_Exploration_in_Model_Driven_Engineering_An_Initial_Pattern_Catalogue.pdf" class="btn" download>Link to Technical Reports</a>
                </div>
            </div>
        </li>
        <!-- Sixth repoet -->
        <li class="list-group-item">
            Omar Alam, Jörg Kienzle and Gunter Mussbacher, "Concern-Driven Software Development", School of Computer Science, McGill University, Jan. 26, 2015, CS-TR-2015.1
            <a class="btn-small" data-toggle="collapse" href="#report6" role="button" aria-expanded="false" aria-controls="collapseExample">
                Abstract
            </a>
            <div class="collapse" id="report6">
                <br>
                <div class="card card-body">
                    <div class="card-title"><b>Abstract</b></div>
                    <p>
                        This paper describes the vision of Concern-Driven Development (CDD), a novel software development paradigm that extends model-driven engineering with best practices from reuse, advanced modularization techniques, goal modelling, and software product line
                        research. CDD advocates the use of a three-part interface to describe units of reuse, i.e., concerns. The variation interface de- scribes required design decisions and their impact on high level system qualities,
                        both explicitly expressed using feature models and goal models. The customization interface allows the chosen variation to be adapted to a specific reuse context, while the us- age interface defines how a customized
                        concern may eventually be used. When a concern is reused, the modeller first uses the varia- tion interface to select the feature configuration that has the desired impact on stakeholder goals and system qualities,
                        then adapts the concern to the context of the application under development with the help of the customization interface, and finally accesses the concern’s functionality through its usage interface. We argue that,
                        if CDD is successfully adopted on a large scale, it will transform the software engineering discipline by enabling software engineers to specialize to a greater degree and hence align the practice of software engineering
                        closer to what is done in other engineering disciplines.
                    </p>
                    <br>
                    <a href="https://www.cs.mcgill.ca/media/tech_reports/14_Concern-Driven_Software_Development.pdf" class="btn" download>Link to Technical Reports</a>
                </div>
            </div>
        </li>
    </ul>
</div>